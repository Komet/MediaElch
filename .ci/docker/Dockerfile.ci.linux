FROM ubuntu:24.04

LABEL maintainer="info@andremeyering.de"

#####################################################################
# This image can be used to develop and test MediaElch
# It is an ALL-IN-ONE image that includes:
#  - Latest GCC + gcov
#  - Latest clang + clang tools
#  - Latest stable Clazy
#  - Latest CMake (via pip) + cmake_format
#  - Mold Linker
#  - Latest lcov from GitHub
#  - shellcheck + cppcheck
#####################################################################

WORKDIR /opt

RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        build-essential \
        debhelper \
        devscripts \
        git \
        wget \
        cmake \
        cmake-format \
        curl \
        zlib1g \
        zlib1g-dev \
        'g++-14' \
        gcc-14 \
        libclang-18-dev \
        clang-tidy-18 \
        clang-tools-18 \
        clang-format-18 \
        clang-18 \
        llvm-18-dev \
        libssl-dev \
        libxxhash-dev \
        pkg-config \
        ccache \
        libgl1-mesa-dev && \
    apt-get install -y --no-install-recommends \
        shellcheck \
        cppcheck \
        xvfb \
        python3 \
        python3-yaml \
        python3-pip \
        python-is-python3 \
        libjson-perl \
        libncurses-dev \
        libncurses6 \
        ninja-build \
        doxygen \
        graphviz \
        libmediainfo-dev && \
    apt-get install -y --no-install-recommends \
        qtbase5-dev \
        qtbase5-dev-tools \
        qt5-qmake \
        qtmultimedia5-dev \
        qttools5-dev \
        qttools5-dev-tools \
        libqt5opengl5 \
        libqt5opengl5-dev \
        libqt5svg5 \
        libqt5svg5-dev && \
    apt-get install -y --no-install-recommends \
        qt6-base-dev \
        qt6-base-dev-tools \
        qt6-tools-dev \
        qt6-tools-dev-tools \
        qt6-l10n-tools \
        qt6-multimedia-dev \
        qt6-image-formats-plugins \
        qt6-5compat-dev \
        qt6-base-dev \
        libqt6sql6-sqlite \
        libxkbcommon-dev \
        qt6-svg-dev \
        libqt6concurrent6t64 && \
    apt-get autoremove && \
    update-alternatives --install /usr/bin/gcc           gcc          /usr/bin/gcc-14          10 && \
    update-alternatives --install /usr/bin/gcov          gcov         /usr/bin/gcov-14         10 && \
    update-alternatives --install /usr/bin/g++           g++          /usr/bin/g++-14          10 && \
    update-alternatives --install /usr/bin/clang++       clang++      /usr/bin/clang++-18      10 && \
    update-alternatives --install /usr/bin/clang         clang        /usr/bin/clang-18        10 && \
    update-alternatives --install /usr/bin/clang-format  clang-format /usr/bin/clang-format-18 10 && \
    update-alternatives --install /usr/bin/clang-tidy    clang-tidy   /usr/bin/clang-tidy-18   10 && \
    update-alternatives --install /usr/bin/llvm-config   llvm-config  /usr/bin/llvm-config-18  10 && \
    update-alternatives --install /usr/bin/llvm-cov      llvm-cov     /usr/bin/llvm-cov-18     10 && \
    rm -rf /var/lib/apt/lists/*

# Use latest lcov
RUN cd /opt && git clone https://github.com/linux-test-project/lcov.git && \
    cd lcov && make install && \
    cd ..   && rm -rf lcov
RUN perl -MCPAN -e 'install PerlIO::gzip' && \
    perl -MCPAN -e 'JSON'

RUN cd /opt && git clone https://github.com/rui314/mold.git && \
    cd mold && git checkout v2.31.0 && \
    ./install-build-deps.sh && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ .. && \
    cmake --build . -j $(nproc) && \
    cmake --install .

# FIXME: Does not build with Clang 18
# RUN cd /opt && git clone --depth=1 https://invent.kde.org/sdk/clazy.git && \
#     cd /opt/clazy && \
#     cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
#         -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -GNinja && \
#     cmake --build build && \
#     cmake --build build --target install && \
#     cd /opt && rm -rf clazy

RUN mkdir /opt/src
VOLUME ["/opt/src"]
WORKDIR /opt/src
